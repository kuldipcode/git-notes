https://git-scm.com/book/en/v2/Git-Internals-Git-Objects
https://medium.com/@paritosh90/understanding-git-internals-c389bc47faeb

Four sub-directories:

hooks/ : example scripts
info/ : exclude file for ignored patterns
objects/ : all "objects"
refs/ : pointers to commit objects
Four files:

HEAD : the current branch
config : configuration options
description
index : staging area
Here "object" includes:

blobs (files)
trees (directories)
commits (reference to a tree, parent commit, etc.)

Subversion
delta storage system

Git
directed acyclic graph (DAG):Storage data structure, A directed acyclic graph or DAG is graph with directed edges and does not form a single cycle if moved in direction of edges.
Objects in GIT: Objects are immutable files stored on disk with hash key as name assigned to them.
.git This folder contain all tracking history of git

.git/Objects
1.Blob: current snapshot of file on git add
2.Tree
3. Commit
4. Tag

Command: find .git/objects -type f

1. Blob contains data in compressed format.
Incase we change test.txt back to blank file new blob will not be created as blob e6 already exist for same.

echo 'version 1' > test.txt
git hash-object -w test.txt (returns commit id and writes to git database)
echo 'version 2' > test.txt
git hash-object -w test.txt (returns commit id and writes to git database)
git cat-file -t SHA-commitId (returns type)
git cat-file -p SHA-commitId (returns content of commited file)

2. Tree
“If blob is a file; then tree is a directory”.
git tree gets created when we use git commit command.
explicitly create a tree using command git write-tree.(will generate root tree)

git write-tree (to write the staging area out to a tree object.)

git cat-file -p master^^{tree}.
In CMD on Windows, the ^ character is used for escaping, so you have to double it to avoid this: git cat-file -p master^^{tree}. 
When using PowerShell, parameters using {} characters have to be quoted to avoid the parameter being parsed incorrectly: git cat-file -p 'master^{tree}'.

3. commit
Commit has two pointers:
1. First pointer points to root tree
2. Second pointer points to older commit.
every new commit we will have new root tree.

echo 'First commit' | git commit-tree d8329f (To create a commit object, you call commit-tree and specify a single tree SHA-1 and which commit objects, if any, directly preceded it. )

4. tag